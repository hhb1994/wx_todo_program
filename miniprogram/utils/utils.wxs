/*
 * @Author: 韩宏斌
 * @Description: this is the description
 * @version: 1.0.0
 * @LastEditors: 韩宏斌
 * @Date: 2020-03-23 15:18:04
 * @LastEditTime: 2020-03-25 15:26:31
 * @FilePath: /wx_cloud_serve_program/miniprogram/utils/utils.wxs
 */

/**
 * @Date: 2020-03-24 12:33:53
 * @Description: 根据传入的格式来格式化时间
 * @param {string}  val 时间戳
 * @param {string} format 格式参数,默认为"yyyy-MM-dd hh:mm:ss"
 * @return:格式化的时间
 */
function dateFormat(val, format = "yyyy-MM-dd hh:mm:ss") {
  var regYear = getRegExp("(y+)", "i");
  var realDate = getDate(val);
  function timeFormat(num) {
    return num < 10 ? "0" + num : num;
  }
  var date = [
    ["M+", timeFormat(realDate.getMonth() + 1)],
    ["d+", timeFormat(realDate.getDate())],
    ["h+", timeFormat(realDate.getHours())],
    ["m+", timeFormat(realDate.getMinutes())],
    ["s+", timeFormat(realDate.getSeconds())],
    ["q+", Math.floor((realDate.getMonth() + 3) / 3)],
    ["S+", realDate.getMilliseconds()]
  ];
  var reg1 = regYear.exec(format);
  if (reg1) {
    format = format.replace(reg1[1], (realDate.getFullYear() + "").substring(4 - reg1[1].length));
  }
  for (var i = 0; i < date.length; i++) {
    var k = date[i][0];
    var v = date[i][1];
    var reg2 = getRegExp("(" + k + ")").exec(format);
    if (reg2) {
      format = format.replace(reg2[1], reg2[1].length == 1 ? v : ("00" + v).substring(("" + v).length));
    }
  }
  return format;
}

function judgeDate(val) {
  // return getDate(val).getTime();
  if (getDate(val) <= getDate()) {
    return "已过期";
  } else {
    return formatMillisecond(parseInt((getDate(val).getTime() - getDate().getTime()) / 1000));
  }
}

function toFix(val) {
  return Number(val).toFixed(0);
}
function formatMillisecond(s) {
  var num = s < 60 ? "sec" : s >= 60 && s < 60 * 60 ? "min" : s >= 60 * 60 && s < 24 * 60 * 60 ? "hour" : "day";
  var calcDate = function(s) {
    switch (num) {
      case "sec":
        return toFix(s) + "秒";
      case "min":
        return toFix(s / 60) + "分";
      case "hour":
        return toFix(s / (60 * 60)) + "时" + toFix((s % (60 * 60)) / 60) + "分";
      case "day":
        return toFix(s / (24 * 60 * 60)) + "天以上";
      default:
        return "error";
    }
  };
  return "剩余时间:" + calcDate(s);
}

module.exports = {
  dateFormat: dateFormat,
  judgeDate: judgeDate
};
